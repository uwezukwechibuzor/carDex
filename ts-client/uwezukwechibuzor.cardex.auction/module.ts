// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgInitiateAuction } from "./types/cardex/auction/tx";
import { MsgSubmitBid } from "./types/cardex/auction/tx";
import { MsgCancelBid } from "./types/cardex/auction/tx";
import { MsgUpdateBid } from "./types/cardex/auction/tx";

import { Auction as typeAuction} from "./types"
import { Bid as typeBid} from "./types"
import { Params as typeParams} from "./types"

export { MsgInitiateAuction, MsgSubmitBid, MsgCancelBid, MsgUpdateBid };

type sendMsgInitiateAuctionParams = {
  value: MsgInitiateAuction,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitBidParams = {
  value: MsgSubmitBid,
  fee?: StdFee,
  memo?: string
};

type sendMsgCancelBidParams = {
  value: MsgCancelBid,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateBidParams = {
  value: MsgUpdateBid,
  fee?: StdFee,
  memo?: string
};


type msgInitiateAuctionParams = {
  value: MsgInitiateAuction,
};

type msgSubmitBidParams = {
  value: MsgSubmitBid,
};

type msgCancelBidParams = {
  value: MsgCancelBid,
};

type msgUpdateBidParams = {
  value: MsgUpdateBid,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgInitiateAuction({ value, fee, memo }: sendMsgInitiateAuctionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgInitiateAuction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgInitiateAuction({ value: MsgInitiateAuction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgInitiateAuction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitBid({ value, fee, memo }: sendMsgSubmitBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSubmitBid({ value: MsgSubmitBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCancelBid({ value, fee, memo }: sendMsgCancelBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelBid({ value: MsgCancelBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateBid({ value, fee, memo }: sendMsgUpdateBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateBid({ value: MsgUpdateBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgInitiateAuction({ value }: msgInitiateAuctionParams): EncodeObject {
			try {
				return { typeUrl: "/uwezukwechibuzor.cardex.auction.MsgInitiateAuction", value: MsgInitiateAuction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgInitiateAuction: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitBid({ value }: msgSubmitBidParams): EncodeObject {
			try {
				return { typeUrl: "/uwezukwechibuzor.cardex.auction.MsgSubmitBid", value: MsgSubmitBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitBid: Could not create message: ' + e.message)
			}
		},
		
		msgCancelBid({ value }: msgCancelBidParams): EncodeObject {
			try {
				return { typeUrl: "/uwezukwechibuzor.cardex.auction.MsgCancelBid", value: MsgCancelBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelBid: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateBid({ value }: msgUpdateBidParams): EncodeObject {
			try {
				return { typeUrl: "/uwezukwechibuzor.cardex.auction.MsgUpdateBid", value: MsgUpdateBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateBid: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Auction: getStructure(typeAuction.fromPartial({})),
						Bid: getStructure(typeBid.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			UwezukwechibuzorCardexAuction: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;